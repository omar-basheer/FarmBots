#!/usr/bin/env pybricks-micropython

# Before running this program, make sure the client and server EV3 bricks are
# paired using Bluetooth, but do NOT connect them. The program will take care
# of establishing the connection.

# The server must be started before the client!

from pybricks.messaging import BluetoothMailboxClient, TextMailbox, Mailbox
from pybricks import ev3brick as brick


def start_bluetooth_server(num_of_clients):
    server = BluetoothMailboxServer()
    mbox = Mailbox('handshake', server)

    print('waiting for connection...')
    server.wait_for_connection(num_of_clients)
    print('connected!')

    mbox.wait()
    received_message = mbox.read()
    print(received_message)
    brick.display.text(received_message)

    mbox.send('handshake successful')

def start_bluetooth_client(server):
    client = BluetoothMailboxClient()
    mbox = Mailbox('handshake', client)

    print('establishing connection...')
    brick.display.text('establishing connection...')
    client.connect(server)
    print('connected!')
    brick.display.text('connected!')

    mbox.wait()
    received_message = mbox.read()
    print(received_message)
    brick.display.text(received_message)

    mbox.send('handshake successful')
    

def send_message_to_server():
    pass

def send_message_to_client():
    pass

# # This is the name of the remote EV3 or PC we are connecting to.
# SERVER = 'ash-ev3-07'

# client = BluetoothMailboxClient()
# mbox = TextMailbox('greeting', client)

# print('establishing connection...')
# client.connect(SERVER)
# print('connected!')

# # In this program, the client sends the first message and then waits for the
# # server to reply.
# mbox.send('Mars to Earth, hello from Mars')
# mbox.wait()
# print(mbox.read())
